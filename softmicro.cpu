;The softmicro CPU uses an assembler generator
;https://github.com/hlorenzi/customasm
;Uses syntax for version 0.11.14

#subruledef ;asm_ver
{
    assembler_version => 0x02
}

#subruledef reg_table
{
    r0 => 0
    r1 => 1
    r2 => 2
    r3 => 3
    r4 => 4
    r5 => 5
    r6 => 6
    r7 => 7
    r8 => 8
    r9 => 9
    r10 => 0x0a
    r11 => 0x0b
    r12 => 0x0c
    r13 => 0x0d
    r14 => 0x0e
    r15 => 0x0f
}

#subruledef size_table
{
    w => 0x0c
    d => 0x0d
    q => 0x0e
    o => 0x0f
}

#subruledef ops_table
{
    ld  => 0x10
    add => 0x11
    adc => 0x12
    sub => 0x13
    sbc => 0x14
    and => 0x15
    or  => 0x16
    xor => 0x17
    cp  => 0x18
    ex  => 0x19
}

#subruledef byte_ops_table
{
    toa => 0x23
    toh => 0x24
    ldf => 0x25
    stf => 0x26
}

#subruledef mbyte_ops_table
{
    msk => 0x27
    swap => 0x28
    rev => 0x29
    sxt => 0x2a
    cpl => 0x2b
    neg => 0x2c
}

#subruledef CIDS_ops_table
{
    clr => 0x80
    inc => 0x90
    dec => 0xa0
    sfl => 0xb0
}

#subruledef muldiv_ops_table
{
    umul => 0x27
    udiv => 0x28
    smul => 0x29
    sdiv => 0x2a
}

#subruledef flags_table
{
    cc => 0x0
    cs => 0x1
    ne => 0x2
    eq => 0x3
    pl => 0x4
    mi => 0x5
    vc => 0x6
    vs => 0x7
    ic => 0x8
    is => 0x9
    hc => 0xa
    hs => 0xb
    tc => 0xc
    ts => 0xd
    sc => 0xe
    ss => 0xf
}

#ruledef
{
    vasm =>
    {
        0x30 @ 0x20 @ 0x02  ;assembler_version`8
    }

    nop         => 0x00
    di          => 0x33
    ei          => 0x34
    reti        => 0x05
    pushf       => 0x06
    popf        => 0x07

    vect {nb}   => {inst = 0x40 | nb`4, inst`8}
    wpz  {bit},({port}) => {inst = 0x50 | bit`3, inst`8 @ port`8}
    wpnz {bit},({port}) => {inst = 0x58 | bit`3, inst`8 @ port`8}
    clr c       => 0x20
    set c       => 0x21
    tog c       => 0x22
    clr h       => 0x30 @ 0x32
    set h       => 0x30 @ 0x33
    tog h       => 0x30 @ 0x34
    clr t       => 0x30 @ 0x32
    set t       => 0x30 @ 0x33
    tog t       => 0x30 @ 0x34

    ;--------------------------
    ; JMP
    ;--------------------------
    jmp {addr}  => 0x0a @ le(addr`16)
    jmp ({reg: reg_table}) => {addr_prefix = 0xE0 | reg, addr_prefix`8 @ 0x0a}
    jmp ({addr})[{reg: reg_table}] => {addr_prefix = 0xF0 | reg, addr_prefix`8 @ 0x0a @ le(addr`16)}
    jmp ({addr}) => 0x37 @ 0x0a @ le(addr`16)

    ;--------------------------
    ; CALL
    ;--------------------------
    call {addr} => 0x08 @ le(addr`16)
    call ({reg: reg_table}) => {addr_prefix = 0xE0 | reg, addr_prefix`8 @ 0x08}
    call ({addr})[{reg: reg_table}] => {addr_prefix = 0xF0 | reg, addr_prefix`8 @ 0x08 @ le(addr`16)}
    call ({addr}) => 0x37 @ 0x08 @ le(addr`16)

    ;--------------------------
    ; BSR
    ;--------------------------
    bsr {addr}  => {disp = addr-(pc+2), assert(disp <= 0xff), 0x09 @ disp`8}
    bsr.w {addr} => {disp = addr-(pc+2), assert(disp <= 0xffff), 0x0c @ 0x09 @ le(disp`16)}
    bsr ({reg: reg_table}) => {addr_prefix = 0xE0 | reg`4, addr_prefix`8 @ 0x09}
    bsr ({addr})[{reg: reg_table}] =>
    {
        disp = addr-pc-3,
        assert(disp <= 0xff),
        addr_prefix = 0xF0 | reg`4,
        addr_prefix`8 @ 0x09 @ disp`8
    }
    bsr.w ({addr})[{reg: reg_table}] =>
    {
        disp = addr-pc-2,
        assert(disp <= 0xffff),
        addr_prefix = 0xF0 | reg`4,
        0x0c @ addr_prefix`8 @ 0x09 @ le(disp`16)
    }

    ;--------------------------
    ; RET, RET cond
    ;--------------------------
    ret         => 0x04
    ret {flag: flags_table} => {inst = 0x70 | flag, 0x30 @ inst`8}

    ;--------------------------
    ; BSR cond
    ;--------------------------
    bsr{flag: flags_table} {addr} => {disp = addr-(pc+2), assert(disp <= 0xff), inst = 0x60 | flag, 0x30 @ inst`8 @ disp`8}
    bsr{flag: flags_table}.w {addr} => {disp = addr-(pc+2), assert(disp <= 0xffff), inst = 0x60 | flag, 0x0C @ 0x30 @ inst`8 @ le(disp`16)}

    ;--------------------------
    ; BR, BR cond
    ;--------------------------
    br {addr} => {disp = addr-(pc+2), assert(disp <= 0xff), 0x0B @ disp`8}
    br.w {addr} => {disp = addr-(pc+2), assert(disp <= 0xffff), 0x0C @ 0x0B @ le(disp`16)}

    br{flag: flags_table} {addr}   => {disp = addr-(pc+2), assert(disp <= 0xff), inst = 0x60 | flag, inst`8 @ disp`8}
    brlt {addr} => {disp = addr-(pc+2), assert(disp <= 0xff), 0x31 @ disp`8}
    brge {addr} => {disp = addr-(pc+2), assert(disp <= 0xff), 0x32 @ disp`8}

    br{flag: flags_table}.w {addr}   => {disp = addr-(pc+2), assert(disp <= 0xffff), inst = 0x60 | flag, 0x0C @ inst`8 @ le(disp`16)}
    brlt.w {addr} => {disp = addr-(pc+2), assert(disp <= 0xffff), 0x0C @ 0x31 @ le(disp`16)}
    brge.w {addr} => {disp = addr-(pc+2), assert(disp <= 0xffff), 0x0C @ 0x32 @ le(disp`16)}

    ;--------------------------
    ; DJNZ
    ;--------------------------
    djnz    {dest: reg_table},{addr} => {inst = 0x70 | dest`4, disp = addr-(pc+2), assert(disp <= 0xff), inst`8 @ disp`8}
    djnz.w  {dest: reg_table},{addr} => {inst = 0x70 | dest`4, disp = addr-(pc+2), assert(disp <= 0xffff), 0x0C @ inst`8 @ le(disp`16)}

    ;--------------------------
    ; UMUL, UDIV, SMUL, SDIV
    ;--------------------------
    {op: muldiv_ops_table} {dest: reg_table},{src: reg_table} => {pair = (dest << 4)|src, 0x30 @ op`8 @ pair`8}
    {op: muldiv_ops_table}.{size: size_table}  {dest: reg_table},{src: reg_table} => {pair = (dest << 4)|src, size`8 @ 0x30 @ op`8 @ pair`8}

    ;--------------------------
    ; LD,ADD,ADC,SUB,SBC,
    ; AND,OR,XOR,CP,EX
    ;--------------------------
    {op: ops_table} {dest: reg_table},{src: reg_table} => {pair = (dest << 4)|src, op`8 @ pair`8}
    {op: ops_table}.{size: size_table}  {dest: reg_table},{src: reg_table} => {pair = (dest << 4)|src, size`8 @ op`8 @ pair`8}

    {op: ops_table} {dest: reg_table},*{src: reg_table}   => {pair = (dest << 4)|src, 0x38 @ op`8 @ pair`8}
    {op: ops_table} {dest: reg_table},*{src: reg_table}++ => {pair = (dest << 4)|src, 0x39 @ op`8 @ pair`8}
    {op: ops_table} {dest: reg_table},*--{src: reg_table} => {pair = (dest << 4)|src, 0x3a @ op`8 @ pair`8}
    {op: ops_table} *{dest: reg_table},{src: reg_table}   => {pair = (dest << 4)|src, 0x3c @ op`8 @ pair`8}
    {op: ops_table} *{dest: reg_table}++,{src: reg_table} => {pair = (dest << 4)|src, 0x3d @ op`8 @ pair`8}
    {op: ops_table} *--{dest: reg_table},{src: reg_table} => {pair = (dest << 4)|src, 0x3e @ op`8 @ pair`8}
    {op: ops_table} {dest: reg_table},{src: reg_table}[{disp}] => {pair = (dest << 4)|src, 0x3b @ op`8 @ pair`8 @ disp`8}
    {op: ops_table} {dest: reg_table}[{disp}],{src: reg_table} => {pair = (dest << 4)|src, 0x3f @ op`8 @ pair`8 @ disp`8}

    {op: ops_table}.{size: size_table} {dest: reg_table},*{src: reg_table}   => {pair = (dest << 4)|src, size`8 @ 0x38 @ op`8 @ pair`8}
    {op: ops_table}.{size: size_table} {dest: reg_table},*{src: reg_table}++ => {pair = (dest << 4)|src, size`8 @ 0x39 @ op`8 @ pair`8}
    {op: ops_table}.{size: size_table} {dest: reg_table},*--{src: reg_table} => {pair = (dest << 4)|src, size`8 @ 0x3a @ op`8 @ pair`8}
    {op: ops_table}.{size: size_table} *{dest: reg_table},{src: reg_table}   => {pair = (dest << 4)|src, size`8 @ 0x3c @ op`8 @ pair`8}
    {op: ops_table}.{size: size_table} *{dest: reg_table}++,{src: reg_table} => {pair = (dest << 4)|src, size`8 @ 0x3d @ op`8 @ pair`8}
    {op: ops_table}.{size: size_table} *--{dest: reg_table},{src: reg_table} => {pair = (dest << 4)|src, size`8 @ 0x3e @ op`8 @ pair`8}
    {op: ops_table}.{size: size_table} {dest: reg_table},{src: reg_table}[{disp}] => {pair = (dest << 4)|src, size`8 @ 0x3b @ op`8 @ pair`8 @ disp`8}
    {op: ops_table}.{size: size_table} {dest: reg_table}[{disp}],{src: reg_table} => {pair = (dest << 4)|src, size`8 @ 0x3f @ op`8 @ pair`8 @ disp`8}

    ;Partial registers
    {op: ops_table} {dest: reg_table}.{index1},{src: reg_table}.{index2} =>
        {
            assert(index1 <= 15);
            assert(index2 <= 15);
            dest_pair = (dest << 4)| index1`4,
            src_pair = (src << 4)| index2`4,
            0x30 @ op`8 @ dest_pair`8 @ src_pair`8
        }

    {op: ops_table}.w {dest: reg_table}.{index1},{src: reg_table}.{index2} =>
        {
            assert(index1 <= 7);
            assert(index2 <= 7);
            dest_pair = (dest << 4)| index1`3,
            src_pair = (src << 4)| index2`3,
            0x0c @ 0x30 @ op`8 @ dest_pair`8 @ src_pair`8
        }

    {op: ops_table}.d {dest: reg_table}.{index1},{src: reg_table}.{index2} =>
        {
            assert(index1 <= 3);
            assert(index2 <= 3);
            dest_pair = (dest << 4)| index1`2,
            src_pair = (src << 4)| index2`2,
            0x0c @ 0x30 @ op`8 @ dest_pair`8 @ src_pair`8
        }

    {op: ops_table}.q {dest: reg_table}.{index1},{src: reg_table}.{index2} =>
        {
            assert(index1 <= 1);
            assert(index2 <= 1);
            dest_pair = (dest << 4)| index1`1,
            src_pair = (src << 4)| index2`1,
            0x0c @ 0x30 @ op`8 @ dest_pair`8 @ src_pair`8
        }

    ;--------------------------
    ; LD,ADD,ADC,SUB,SBC,
    ; AND,OR,XOR,CP,EX
    ; address access
    ;--------------------------
    ;ABS
    {op: ops_table}  {dest: reg_table},({addr}) =>
    {
        assert(addr <= 0xffff),
        prefix = 0xE0 | dest,
        prefix @ op`8 @ le(addr`16)
    }

    {op: ops_table}.{size: size_table} {dest: reg_table},({addr}) =>
    {
        assert(addr <= 0xffff),
        prefix = 0xE0 | dest,
        size`8 @ prefix`8 @ op`8 @ le(addr`16)
    }

    ;BIT

    ;--------------------------
    ; ST
    ;--------------------------
    ;ABS
    st ({addr}),{src: reg_table}, =>
    {
        assert(addr <= 0xffff),
        prefix = 0xE0 | src,
        prefix @ 0x1d @ le(addr`16)
    }

    st.{size: size_table} ({addr}),{src: reg_table} =>
    {
        assert(addr <= 0xffff),
        prefix = 0xE0 | src,
        size`8 @ prefix`8 @ 0x1d @ le(addr`16)
    }

    ;--------------------------
    ; LD,ADD,ADC,SUB,SBC,
    ; AND,OR,XOR,CP
    ; TABLE ACCESS
    ;--------------------------
    ;ABS
    {op: ops_table}  {dest: reg_table},({addr})[{src: reg_table}] =>
    {
        assert(op != 0x19),
        assert(addr <= 0xffff),
        pair = (dest << 4)|src,
        0x36 @ op`8 @ pair`8 @ le(addr`16)
    }

    {op: ops_table}.{size: size_table} {dest: reg_table},({addr})[{src: reg_table}] =>
    {
        assert(op != 0x19),
        assert(addr <= 0xffff),
        pair = (dest << 4)|src,
        size`8 @ 0x36 @ op`8 @ pair`8 @ le(addr`16)
    }

    ;REL
    {op: ops_table}  {dest: reg_table},(~{addr})[{src: reg_table}] =>
    {
        assert(op != 0x19),
        assert(addr <= 0xffff),
        disp = addr - pc,
        pair = (dest << 4)|src,
        0x35 @ op`8 @ pair`8 @ le(disp`16)
    }

    {op: ops_table}.{size: size_table} {dest: reg_table},(~{addr})[{src: reg_table}] =>
    {
        assert(op != 0x19),
        assert(addr <= 0xffff),
        disp = addr - pc,
        pair = (dest << 4)|src,
        size`8 @ 0x35 @ op`8 @ pair`8 @ le(disp`16)
    }

    ;--------------------------
    ; LD,ADD,ADC,SUB,SBC,
    ; AND,OR,XOR,CP
    ; IMM
    ;--------------------------
    {op: ops_table}  {dest: reg_table},#{value} =>
    {
        assert(op != 0x19),
        assert(value <= 0xff),
        addr_prefix = 0xf0 | dest`4,
        addr_prefix`8 @ op`8 @ value`8
    }

    {op: ops_table}.w {dest: reg_table},#{value} =>
    {
        assert(op != 0x19),
        assert(value <= 0xffff),
        addr_prefix = 0xf0 | dest`4,
        0x0c @ addr_prefix`8 @ op`8 @ le(value`16)
    }

    {op: ops_table}.d {dest: reg_table},#{value} => {
        assert(op != 0x19),
        assert(value <= 0xffffffff),
        addr_prefix = 0xf0 | dest`4,
        0x0d @ addr_prefix`8 @ 0x10 @ le(value`32)
    }

    {op: ops_table}.q {dest: reg_table},#{value} => {
        assert(op != 0x19),
        assert(value <= 0xffffffffffffffff),
        addr_prefix = 0xf0 | dest`4,
        0x0e @ addr_prefix`8 @ 0x10 @ le(value`64)
    }

    {op: ops_table}.o {dest: reg_table},#{value} => {
        assert(op != 0x19),
        assert(value <= 0xffffffffffffffffffffffffffffffff),
        addr_prefix = 0xf0 | dest`4,
        0x0f @ addr_prefix`8 @ 0x10 @ le(value`128)
    }

    {op: ops_table} ({addr}),#{value} =>
    {
        assert(op != 0x19),
        assert(value <= 0xff),
        0x37 @ op`8 @ le(addr`16) @ value`8
    }

    {op: ops_table}.w ({addr}),#{value} =>
    {
        assert(op != 0x19),
        assert(value <= 0xffff),
        0x0c @ 0x37 @ op`8 @ le(addr`16) @ le(value`16)
    }

    {op: ops_table}.d ({addr}),#{value} =>
    {
        assert(op != 0x19),
        assert(value <= 0xffffffff),
        0x0d @ 0x37 @ op`8 @ le(addr`16) @ le(value`32)
    }

    {op: ops_table}.q ({addr}),#{value} =>
    {
        assert(op != 0x19),
        assert(value <= 0xffffffffffffffff),
        0x0e @ 0x37 @ op`8 @ le(addr`16) @ le(value`64)
    }

    {op: ops_table}.o ({addr}),#{value} =>
    {
        assert(op != 0x19),
        assert(value <= 0xffffffffffffffffffffffffffffffff),
        0x0f @ 0x37 @ op`8 @ le(addr`16) @ le(value`128)
    }

    ;--------------------------
    ; BYTE UNARY OPS
    ;--------------------------
    {op: byte_ops_table} {dest: reg_table} => {assert(dest == 0), op`8}
    {op: byte_ops_table} {dest: reg_table} => {assert(dest != 0), addr_prefix = 0xF0 | dest`4, addr_prefix`8 @ op`8}

    ;--------------------------
    ; MULTI-BYTE UNARY OPS
    ;--------------------------
    {op: mbyte_ops_table} {dest: reg_table} => {assert(dest == 0), op`8}
    {op: mbyte_ops_table} {dest: reg_table} => {assert(dest != 0), addr_prefix = 0xF0 | dest`4, addr_prefix`8 @ op`8}

    {op: mbyte_ops_table}.{size: size_table} {dest: reg_table} => {assert(dest == 0), size`8 @ op`8}
    {op: mbyte_ops_table}.{size: size_table} {dest: reg_table} => {assert(dest != 0), addr_prefix = 0xF0 | dest`4, size`8 @ addr_prefix`8 @ op`8}

    ;--------------------------
    ; ASx,ROx,LSx
    ;--------------------------
    asl {dest: reg_table},{nb_shifts} => {assert(nb_shifts < 8), param = ((nb_shifts << 4) | dest`4), 0x2d @ param`8}
    asr {dest: reg_table},{nb_shifts} => {assert(nb_shifts < 8), param = (0x80 | (nb_shifts << 4) | dest`4), 0x2d @ param`8}
    rol {dest: reg_table},{nb_shifts} => {assert(nb_shifts < 8), param = ((nb_shifts << 4) | dest`4), 0x2e @ param`8}
    ror {dest: reg_table},{nb_shifts} => {assert(nb_shifts < 8), param = (0x80 | (nb_shifts << 4) | dest`4), 0x2e @ param`8}
    lsl {dest: reg_table},{nb_shifts} => {assert(nb_shifts < 8), param = ((nb_shifts << 4) | dest`4), 0x2f @ param`8}
    lsr {dest: reg_table},{nb_shifts} => {assert(nb_shifts < 8), param = (0x80 | (nb_shifts << 4) | dest`4), 0x2f @ param`8}

    ;--------------------
    asl.{size: size_table} {dest: reg_table},{nb_shifts} =>
    {
        assert(nb_shifts < 8),
        param = ((nb_shifts << 4) | dest`4), size`8 @ 0x2d @ param`8
    }

    asr.{size: size_table} {dest: reg_table},{nb_shifts} =>
    {
        assert(nb_shifts < 8),
        param = (0x80 | (nb_shifts << 4) | dest`4), size`8 @ 0x2d @ param`8
    }

    rol.{size: size_table} {dest: reg_table},{nb_shifts} =>
    {
        assert(nb_shifts < 8),
        param = ((nb_shifts << 4) | dest`4), size`8 @ 0x2e @ param`8
    }

    ror.{size: size_table} {dest: reg_table},{nb_shifts} =>
    {
        assert(nb_shifts < 8),
        param = (0x80 | (nb_shifts << 4) | dest`4), size`8 @ 0x2e @ param`8
    }

    lsl.{size: size_table} {dest: reg_table},{nb_shifts} =>
    {
        assert(nb_shifts < 8),
        param = ((nb_shifts << 4) | dest`4), size`8 @ 0x2f @ param`8
    }

    lsr.{size: size_table} {dest: reg_table},{nb_shifts} =>
    {
        assert(nb_shifts < 8),
        param = (0x80 | (nb_shifts << 4) | dest`4), size`8 @ 0x2f @ param`8
    }

    ;--------------------------
    ; CLR,INC,DEC,SFL (CIDS ops)
    ;--------------------------
    {op: CIDS_ops_table} {dest: reg_table}  => {inst = op | dest`4, inst`8}
	{op: CIDS_ops_table}.{size: size_table} {dest: reg_table}  => {inst = op | dest`4, size`8 @ inst`8}

    ;--------------------------
    ; BIT,TOG,TEST,WAITR
    ;--------------------------
    bitc  {dest: reg_table}.{bit} => {assert(bit<8),param = (bit`3 << 4) | dest`4, 0x1a @ param`8}
    bits  {dest: reg_table}.{bit} => {assert(bit<8),param = 0x80 | (bit`3 << 4) | dest`4, 0x1a @ param`8}
    tog   {dest: reg_table}.{bit} => {assert(bit<8),param = 0x80 | (bit << 4) | dest`4, 0x1b @ param`8}
    test {dest: reg_table}.{bit}  => {assert(bit<8),param = (bit << 4) | dest`4, 0x1b @ param`8}
    waitc {dest: reg_table}.{bit} => {assert(bit<8),param = (bit << 4) | dest`4, 0x1c @ param`8}
    waits {dest: reg_table}.{bit} => {assert(bit<8),param = 0x80 | (bit << 4) | dest`4, 0x1c @ param`8}

    ;--------------------------
    ; IN,OUT
    ;--------------------------
    in {dest: reg_table},({port}) => {assert(dest == 0), 0x1e @ port`8}
    in {dest: reg_table},({port}) => {assert(dest != 0), addr_prefix = 0xF0 | dest`4, addr_prefix`8 @ 0x1e @ port`8}
    in {dest: reg_table},({src: reg_table}) => {pair = (dest << 4)|src, 0x30 @ 0x1e @ pair`8}

    out ({port}),{src: reg_table} => {assert(src == 0), 0x1f @ port`8}
    out ({port}),{src: reg_table} => {assert(src != 0), addr_prefix = 0xF0 | src`4, addr_prefix`8 @ 0x1f @ port`8}
    out ({dest: reg_table}),{src: reg_table} => {pair = (dest << 4)|src, 0x30 @ 0x1f @ pair`8}

    outv ({port}),#{value} =>
    {
        assert(port <= 0xff),
        assert(value <= 0xff),
        0x30 @ 0x1c @ port`8 @ value`8
    }

    iores {bit},({reg: reg_table}) =>
    {
        assert(bit <= 0x7),
        bitreg = (bit`3 << 4) | reg`4,
        0x1d @ bitreg`8
    }

    ioset {bit},({reg: reg_table}) =>
    {
        assert(bit <= 0x7),
        bitreg = 0x80 | (bit`3 << 4) | reg`4,
        0x1d @ bitreg`8
    }

    iores {bit},({port}) =>
    {
        assert(port <= 0xff),
        assert(bit <= 0x7),
        addr_prefix = 0xF0 | bit`3,
        addr_prefix`8 @ 0x1d @ port`8
    }

    ioset {bit},({port}) =>
    {
        assert(port <= 0xff),
        assert(bit <= 0x7),
        addr_prefix = 0xF8 | bit`3,
        addr_prefix`8 @ 0x1d @ port`8
    }

    ini  ({dest: reg_table}),({src: reg_table}),{ctr: reg_table} => {addr_prefix = 0xF0 | ctr`4, pair = (dest << 4)|src, addr_prefix`8 @ 0x3c @ pair`8}
    outi ({dest: reg_table}),({src: reg_table}),{ctr: reg_table} => {addr_prefix = 0xF0 | ctr`4, pair = (dest << 4)|src, addr_prefix`8 @ 0x3d @ pair`8}
    inir ({dest: reg_table}),({src: reg_table}),{ctr: reg_table} => {addr_prefix = 0xF0 | ctr`4, pair = (dest << 4)|src, addr_prefix`8 @ 0x3e @ pair`8}
    otir ({dest: reg_table}),({src: reg_table}),{ctr: reg_table} => {addr_prefix = 0xF0 | ctr`4, pair = (dest << 4)|src, addr_prefix`8 @ 0x3f @ pair`8}
    ind  ({dest: reg_table}),({src: reg_table}),{ctr: reg_table} => {addr_prefix = 0xF0 | ctr`4, pair = (dest << 4)|src, addr_prefix`8 @ 0x4c @ pair`8}
    outd ({dest: reg_table}),({src: reg_table}),{ctr: reg_table} => {addr_prefix = 0xF0 | ctr`4, pair = (dest << 4)|src, addr_prefix`8 @ 0x4d @ pair`8}
    indr ({dest: reg_table}),({src: reg_table}),{ctr: reg_table} => {addr_prefix = 0xF0 | ctr`4, pair = (dest << 4)|src, addr_prefix`8 @ 0x4e @ pair`8}
    otdr ({dest: reg_table}),({src: reg_table}),{ctr: reg_table} => {addr_prefix = 0xF0 | ctr`4, pair = (dest << 4)|src, addr_prefix`8 @ 0x4f @ pair`8}

    ;16 bits IO Low high
    in.w {dest: reg_table},({port}) => {assert(dest == 0), 0x0c @ 0x1e @ port`8}
    in.w {dest: reg_table},({port}) => {assert(dest != 0), addr_prefix = 0xF0 | dest`4, 0x0c @ addr_prefix`8 @ 0x1e @ port`8}
    out.w ({port}),{src: reg_table} => {assert(src == 0), 0x0c @ 0x1f @ port`8}
    out.w ({port}),{src: reg_table} => {assert(src != 0), addr_prefix = 0xF0 | src`4, 0x0c @ addr_prefix`8 @ 0x1f @ port`8}

    ;--------------------------
    ; PUSH,POP
    ;--------------------------
    push pc     => 0x01

    push {reg: reg_table} => {inst = 0xC0 | reg`4, inst`8}
    pop {reg: reg_table} => {inst = 0xD0 | reg`4, inst`8}
    push.{size: size_table} {reg: reg_table} => {inst = 0xC0 | reg`4, size`8 @ inst`8}
    pop.{size: size_table} {reg: reg_table} => {inst = 0xD0 | reg`4, size`8 @ inst`8}

    ; PUSH IMM
    push #{value} =>
    {
        assert(value <= 0xff),
        0x02 @ value`8
    }

    push.w #{value} =>
    {
        assert(value <= 0xffff),
        0x0c @ 0x02 @ le(value`16)
    }

    push.d #{value} => {
        assert(value <= 0xffffffff),
        0x0d @ 0x02 @ le(value`32)
    }

    push.q #{value} => {
        assert(value <= 0xffffffffffffffff),
        0x0e @ 0x02 @ le(value`64)
    }

    push.o #{value} => {
        assert(value <= 0xffffffffffffffffffffffffffffffff),
        0x0f @ 0x02 @ le(value`128)
    }

    popn #{value} =>
    {
        assert(value <= 0xff),
        0x03 @ value`8
    }

    ;--------------------------
    ; MSWAP,MCPIR,MCPDR,MFILL
    ;--------------------------
    mswap ({dest: reg_table},{src: reg_table}),{ctr: reg_table} =>
    {
        pair = (dest << 4)|src, inst = 0xD0 | ctr,
        0x30 @ inst`8 @ pair`8
    }

    lddr ({dest: reg_table},{src: reg_table}),{ctr: reg_table} =>
    {
        pair = (dest << 4)|src, inst = 0xE0 | ctr,
        0x30 @ inst`8 @ pair`8
    }

    ldir ({dest: reg_table},{src: reg_table}),{ctr: reg_table} =>
    {
        pair = (dest << 4)|src, inst = 0xF0 | ctr,
        0x30 @ inst`8 @ pair`8
    }

    mfill ({start: reg_table},{end: reg_table}),#{value} =>
    {
        assert(value <= 0xff),
        pair = (start << 4)|end,
        0x30 @ 0x21 @ pair`8 @ value`8
    }

    ;--------------------------
    ; RAND
    ;--------------------------
    rand        => 0x30 @ 0x0B
    rand.{size: size_table} => {size`8 @ 0x30 @ 0x0B}

    ;--------------------------
    ; Extended
    ;--------------------------
    ver         => 0x30 @ 0x00
    sern        => 0x30 @ 0x01
    halt        => 0x30 @ 0x02

    step        => 0x30 @ 0x0F

    toup        => 0x30 @ 0x23
    tolo        => 0x30 @ 0x24
    ldv         => 0x30 @ 0x25
    stv         => 0x30 @ 0x26

    bcd         => 0x30 @ 0x09
    bin         => 0x30 @ 0x0A
    bcd.{size: size_table}         => {size`8 @ 0x30 @ 0x09}
    bin.{size: size_table}         => {size`8 @ 0x30 @ 0x0A}
}
