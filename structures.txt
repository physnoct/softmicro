;Do .. while/While .. end structures with redo/break
        ;c > A
        _do
			;some code
			ld	a,c
			out (0x00),a
        _do_while_cmp(c,>,A)

		_do
			ld	a,b
			out (0x00),a
		_do_while_dnz(b)

;Switch structure

		_sw_case(b)

		_case (#1)
            ;CODE CASE 1
			_sw_break

		_sw_default
			;CODE
		_sw_end

;If . then else structure
		_if_z
			ld	a,#1
		_else
			ld	a,#2
		_endif

		out	(0x00),a

;---------------------------------------------------------
; Different conditions can be used in various combinations
; Flags: z,cy,nz,nz,plus,minus
; Bits: bit,not_bit
; Equ, equ with mask: equ,neq,equm,neqm
;	A ?= Value
;	A and Mask ?= Value
; Range:
;	Min <= A < Max
; Compare:
;	A ? B	where ? is <,>,=,<=,>=,!=

;flags
_do_while_z
_do_while_nz
_do_while_cy
_do_while_nc
_do_while_plus
_do_while_minus

;bit,reg
_do_while_bit
_do_while_not_bit

;register,mask,value
_do_while_equm
_do_while_neqm

;register,value
_do_while_equ
_do_while_neq
_do_while_cmp

;register
_do_while_dnz
_do_while_range

;loop
_do_while_always
_do_loop

;break
_do_break_nz
_do_break_z
_do_break_nc
_do_break_cy
_do_break_range
_do_break

redo
_redo_nz
_redo_z
_redo
_do

# Structures while (cond) { break[cond] };
_while_z
_while_nz
_while_bit
_while_not_bit
_while_equm
_while_equ
_while_cmp
_while_range
_wh_break
_wh_end

	# Structures if (cond) {} else {};
_if_plus
_if_minus

_if_z
_if_nz
_if_cy
_if_nc
_if_bit
_if_not_bit
_if_range

_if_equm_or2
_if_equm_or3
_if_equm_or4
_if_equm
_if_neqm

_if_equ_or2
_if_equ_or3
_if_equ_or4
_if_equ
_if_neq
_if_cmp
_elseif_bit
_elseif_not_bit
_elseif_range
_elseif_equ_or2
_elseif_equ_or3
_elseif_equ_or4
_elseif_equ

;no jump
_nj_else
_else
_endif

_switch
_sw_io
_sw_case
_case_or2
_case_or3
_case_or4
_case_range
_case_cmp
_case_bit
_case_not_bit
_case
_sw_break_z
_sw_break_nz
_sw_break

